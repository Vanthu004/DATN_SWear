import AsyncStorage from '@react-native-async-storage/async-storage';
import * as Notifications from 'expo-notifications';

/**
 * Service x·ª≠ l√Ω th√¥ng b√°o ƒë∆°n h√†ng
 */
export class OrderNotificationService {
  static instance = null;

  constructor() {
    this.isInitialized = false;
  }

  static getInstance() {
    if (!OrderNotificationService.instance) {
      OrderNotificationService.instance = new OrderNotificationService();
    }
    return OrderNotificationService.instance;
  }

  /**
   * Kh·ªüi t·∫°o service
   */
  async initialize() {
    if (this.isInitialized) return;
    
    try {
      // C·∫•u h√¨nh notification handler cho ƒë∆°n h√†ng
      Notifications.setNotificationHandler({
        handleNotification: async () => ({
          shouldShowBanner: true,
          shouldShowList: true,
          shouldPlaySound: true,
          shouldSetBadge: false,
        }),
      });

      this.isInitialized = true;
      console.log('[OrderNotification] Service initialized successfully');
    } catch (error) {
      console.error('[OrderNotification] Error initializing service:', error);
    }
  }

  /**
   * L·∫•y c·∫•u h√¨nh th√¥ng b√°o theo tr·∫°ng th√°i ƒë∆°n h√†ng
   */
  getOrderStatusConfig(orderStatus, previousStatus) {
    const statusMap = {
      'pending': {
        title: '‚è≥ ƒê∆°n h√†ng ƒëang ch·ªù x·ª≠ l√Ω',
        body: 'ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ti·∫øp nh·∫≠n v√† ƒëang ch·ªù x·ª≠ l√Ω',
        priority: 'normal',
        actionRequired: false,
        icon: '‚è≥'
      },
      'confirmed': {
        title: '‚úÖ ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n',
        body: 'ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n v√† s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω s·ªõm nh·∫•t',
        priority: 'high',
        actionRequired: false,
        icon: '‚úÖ'
      },
      'processing': {
        title: 'üîß ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω',
        body: 'ƒê∆°n h√†ng c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c ƒë√≥ng g√≥i v√† chu·∫©n b·ªã giao h√†ng',
        priority: 'normal',
        actionRequired: false,
        icon: 'üîß'
      },
      'shipping': {
        title: 'üöö ƒê∆°n h√†ng ƒëang giao',
        body: 'ƒê∆°n h√†ng c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c giao. D·ª± ki·∫øn nh·∫≠n h√†ng trong 1-3 ng√†y',
        priority: 'high',
        actionRequired: false,
        icon: 'üöö'
      },
      'delivered': {
        title: 'üéâ ƒê∆°n h√†ng ƒë√£ giao th√†nh c√¥ng',
        body: 'ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c giao th√†nh c√¥ng. C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng!',
        priority: 'normal',
        actionRequired: true,
        icon: 'üéâ'
      },
      'cancelled': {
        title: '‚ùå ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy',
        body: 'ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ b·ªã h·ªßy. Li√™n h·ªá h·ªó tr·ª£ ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt',
        priority: 'high',
        actionRequired: true,
        icon: '‚ùå'
      },
      'refunded': {
        title: 'üí∞ ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ho√†n ti·ªÅn',
        body: 'ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ho√†n ti·ªÅn. Ti·ªÅn s·∫Ω ƒë∆∞·ª£c chuy·ªÉn v·ªÅ t√†i kho·∫£n trong 3-5 ng√†y',
        priority: 'high',
        actionRequired: false,
        icon: 'üí∞'
      },
      'returned': {
        title: 'üì¶ ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c tr·∫£ l·∫°i',
        body: 'ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c tr·∫£ l·∫°i th√†nh c√¥ng. Ch√∫ng t√¥i s·∫Ω x·ª≠ l√Ω ho√†n ti·ªÅn s·ªõm nh·∫•t',
        priority: 'normal',
        actionRequired: false,
        icon: 'üì¶'
      },
      'delayed': {
        title: '‚è∞ ƒê∆°n h√†ng b·ªã ch·∫≠m tr·ªÖ',
        body: 'ƒê∆°n h√†ng c·ªßa b·∫°n b·ªã ch·∫≠m tr·ªÖ do m·ªôt s·ªë l√Ω do kh√°ch quan. Xin l·ªói v√¨ s·ª± b·∫•t ti·ªán!',
        priority: 'high',
        actionRequired: false,
        icon: '‚è∞'
      },
      'out_for_delivery': {
        title: 'üöõ ƒê∆°n h√†ng ƒëang giao ƒë·∫øn b·∫°n',
        body: 'ƒê∆°n h√†ng c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c giao ƒë·∫øn ƒë·ªãa ch·ªâ. H√£y chu·∫©n b·ªã nh·∫≠n h√†ng!',
        priority: 'high',
        actionRequired: false,
        icon: 'üöõ'
      },
      'ready_for_pickup': {
        title: 'üì¶ ƒê∆°n h√†ng s·∫µn s√†ng nh·∫≠n',
        body: 'ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ s·∫µn s√†ng ƒë·ªÉ nh·∫≠n t·∫°i c·ª≠a h√†ng',
        priority: 'high',
        actionRequired: true,
        icon: 'üì¶'
      },
      'payment_pending': {
        title: 'üí≥ Ch·ªù thanh to√°n',
        body: 'ƒê∆°n h√†ng c·ªßa b·∫°n ƒëang ch·ªù thanh to√°n. Vui l√≤ng ho√†n t·∫•t thanh to√°n ƒë·ªÉ ti·∫øp t·ª•c',
        priority: 'high',
        actionRequired: true,
        icon: 'üí≥'
      },
      'payment_failed': {
        title: '‚ùå Thanh to√°n th·∫•t b·∫°i',
        body: 'Thanh to√°n ƒë∆°n h√†ng th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá h·ªó tr·ª£',
        priority: 'high',
        actionRequired: true,
        icon: '‚ùå'
      }
    };

    const config = statusMap[orderStatus] || {
      title: 'üìã C·∫≠p nh·∫≠t ƒë∆°n h√†ng',
      body: `Tr·∫°ng th√°i ƒë∆°n h√†ng ƒë√£ thay ƒë·ªïi t·ª´ "${previousStatus}" th√†nh "${orderStatus}"`,
      priority: 'normal',
      actionRequired: false,
      icon: 'üìã'
    };

    return config;
  }

  /**
   * T·∫°o th√¥ng b√°o ƒë∆°n h√†ng
   */
  createOrderNotification(orderData) {
    const { 
      orderId, 
      orderStatus, 
      previousStatus, 
      estimatedDelivery, 
      trackingNumber, 
      adminNote,
      orderAmount,
      paymentMethod,
      deliveryAddress,
      items
    } = orderData;
    
    // L·∫•y c·∫•u h√¨nh theo tr·∫°ng th√°i
    const statusConfig = this.getOrderStatusConfig(orderStatus, previousStatus);
    
    // T·∫°o n·ªôi dung th√¥ng b√°o
    let body = statusConfig.body;
    
    // Th√™m th√¥ng tin b·ªï sung
    if (estimatedDelivery) {
      body += `\n‚è∞ D·ª± ki·∫øn giao h√†ng: ${estimatedDelivery}`;
    }
    
    if (trackingNumber) {
      body += `\nüìã M√£ tracking: ${trackingNumber}`;
    }

    if (adminNote) {
      body += `\nüìù Ghi ch√∫: ${adminNote}`;
    }

    if (orderAmount) {
      body += `\nüí∞ T·ªïng ti·ªÅn: ${orderAmount}`;
    }

    if (paymentMethod) {
      body += `\nüí≥ Ph∆∞∆°ng th·ª©c thanh to√°n: ${paymentMethod}`;
    }

    if (deliveryAddress) {
      body += `\nüìç ƒê·ªãa ch·ªâ giao h√†ng: ${deliveryAddress}`;
    }

    if (items && items.length > 0) {
      const itemNames = items.slice(0, 3).map(item => item.name).join(', ');
      body += `\nüõçÔ∏è S·∫£n ph·∫©m: ${itemNames}${items.length > 3 ? '...' : ''}`;
    }

    return {
      title: statusConfig.title,
      body: body,
      category: 'order_status_change',
      priority: statusConfig.priority,
      orderId: orderId,
      icon: statusConfig.icon,
      additionalData: {
        orderStatus: orderStatus,
        previousStatus: previousStatus,
        estimatedDelivery: estimatedDelivery,
        trackingNumber: trackingNumber,
        adminNote: adminNote,
        orderAmount: orderAmount,
        paymentMethod: paymentMethod,
        deliveryAddress: deliveryAddress,
        items: items,
        statusChangeTime: new Date().toISOString(),
        actionRequired: statusConfig.actionRequired
      }
    };
  }

  /**
   * L∆∞u th√¥ng b√°o ƒë∆°n h√†ng v√†o storage
   */
  async saveOrderNotificationToStorage(notificationData) {
    try {
      const existingNotificationsRaw = await AsyncStorage.getItem('userNotifications');
      let notifications = existingNotificationsRaw ? JSON.parse(existingNotificationsRaw) : [];

      // T·∫°o notification object
      const newNotification = {
        id: `order_${notificationData.orderId}_${Date.now()}`,
        title: notificationData.title,
        text: notificationData.body,
        type: 'order_status_change',
        orderId: notificationData.orderId,
        category: notificationData.category,
        priority: notificationData.priority,
        icon: notificationData.icon,
        timestamp: new Date().toISOString(),
        isRead: false,
        source: 'backend',
        additionalData: notificationData.additionalData
      };

      // Th√™m v√†o ƒë·∫ßu danh s√°ch
      notifications.unshift(newNotification);

      // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng th√¥ng b√°o (gi·ªØ 100 th√¥ng b√°o g·∫ßn nh·∫•t)
      if (notifications.length > 100) {
        notifications = notifications.slice(0, 100);
      }

      // L∆∞u v√†o storage
      await AsyncStorage.setItem('userNotifications', JSON.stringify(notifications));
      
      console.log('[OrderNotification] Order notification saved to storage:', newNotification);
      return newNotification;
    } catch (error) {
      console.error('[OrderNotification] Error saving order notification to storage:', error);
      throw error;
    }
  }

  /**
   * X·ª≠ l√Ω th√¥ng b√°o ƒë∆°n h√†ng t·ª´ backend
   */
  async handleOrderNotificationFromBackend(notificationData) {
    try {
      // L∆∞u v√†o storage
      const savedNotification = await this.saveOrderNotificationToStorage(notificationData);
      
      // Hi·ªÉn th·ªã th√¥ng b√°o local n·∫øu app ƒëang m·ªü
      if (notificationData.priority === 'high') {
        await this.showLocalOrderNotification(savedNotification);
      }
      
      return savedNotification;
    } catch (error) {
      console.error('[OrderNotification] Error handling order notification from backend:', error);
      throw error;
    }
  }

  /**
   * Hi·ªÉn th·ªã th√¥ng b√°o local cho ƒë∆°n h√†ng
   */
  async showLocalOrderNotification(notificationData) {
    try {
      const { status } = await Notifications.getPermissionsAsync();
      
      if (status === 'granted') {
        await Notifications.scheduleNotificationAsync({
          content: {
            title: notificationData.title,
            body: notificationData.text,
            data: {
              type: 'order_status_change',
              orderId: notificationData.orderId,
              category: notificationData.category,
              priority: notificationData.priority,
              ...notificationData.additionalData
            },
            sound: 'default',
            priority: 'high',
          },
          trigger: null, // G·ª≠i ngay l·∫≠p t·ª©c
        });
        
        console.log('[OrderNotification] Local order notification scheduled');
      }
    } catch (error) {
      console.error('[OrderNotification] Error showing local order notification:', error);
    }
  }

  /**
   * L·∫•y th√¥ng b√°o ƒë∆°n h√†ng t·ª´ storage
   */
  async getOrderNotificationsFromStorage() {
    try {
      const existingNotificationsRaw = await AsyncStorage.getItem('userNotifications');
      if (!existingNotificationsRaw) return [];
      
      const notifications = JSON.parse(existingNotificationsRaw);
      return notifications.filter(n => n.type === 'order_status_change');
    } catch (error) {
      console.error('[OrderNotification] Error getting order notifications from storage:', error);
      return [];
    }
  }

  /**
   * X√≥a th√¥ng b√°o ƒë∆°n h√†ng c≈©
   */
  async cleanupOldOrderNotifications(daysToKeep = 30) {
    try {
      const existingNotificationsRaw = await AsyncStorage.getItem('userNotifications');
      if (!existingNotificationsRaw) return;
      
      const notifications = JSON.parse(existingNotificationsRaw);
      const cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);
      
      const filteredNotifications = notifications.filter(n => {
        if (n.type === 'order_status_change') {
          const notificationDate = new Date(n.timestamp);
          return notificationDate > cutoffDate;
        }
        return true; // Gi·ªØ l·∫°i c√°c lo·∫°i th√¥ng b√°o kh√°c
      });
      
      await AsyncStorage.setItem('userNotifications', JSON.stringify(filteredNotifications));
      console.log('[OrderNotification] Cleaned up old order notifications');
    } catch (error) {
      console.error('[OrderNotification] Error cleaning up old order notifications:', error);
    }
  }
}

// Export singleton instance
export const orderNotificationService = OrderNotificationService.getInstance();
